@{
    ViewData["Title"] = "Directorio";
}

@* ************************************************** Estilos css ****************************************************** *@
<style>
    h1 {
        text-align: center;
    }
    .nuevaContainer {
        display: flex;
        justify-content: flex-end;
    }
    .modalBodyContainers {
        display: flex;
        align-items: center;
    }
    .contenedorDivsModal div:not(:first-child) {
        margin-top: 2%;
    }
    .alertSuccess {
        display: none;
    }
    .alertMensajeLetra {
        font-weight: bold;
        font-size: larger;
    }
    #nombreRequerido {
        margin-left: 23%;
        color: #EA4242;
        display: none;
    }
    #aPaternoRequerido {
        margin-left: 23%;
        color: #EA4242;
        display: none;
    }
    #identificacionRequerido {
        margin-left: 22%;
        color: #EA4242;
        display: none;
    }
    #camposCompletos {
        margin-top: 2%;
        color: #EA4242;
        display: none;
    }
    .inputRequerido {
        border: 2px solid #EA4242;
    }
    #mensajeError2 {
        margin-top: 2%;
        color: #EA4242;
        display: none;
    }
    #labelAsterisco {
        color: #EA4242;
    }
</style>
@* *************************************************************************************************** *@

@* Título directorio *@
<h1>Directorio</h1>
@* ** *@

@* Contenedor para mostrar mensajes de alert *@
<div id="liveAlertPlaceholder"></div>
@* ** *@

@* Contenedor de el botón registrar y de la tabla *@
<div class="container">
    @* Contenedor donde esta el botón Registrar una nueva persona *@
    <div class="nuevaContainer">
        <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#modalPersonas" onclick="AbrirModal('Registrar', null);">Registrar</button>
    </div>
    @* ** *@

    @* Tabla para mostrar las personas existentes *@
    <table id="tablaPersonas" class="table table-hover table-bordered table-striped" style="width:100%">
        <thead>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>A. Paterno</th>
                <th>A. Materno</th>
                <th>Identificación</th>
                <th>Acción</th>
            </tr>
        </thead>
        <tfoot>
            <tr>
                <th>Id</th>
                <th>Nombre</th>
                <th>A. Paterno</th>
                <th>A. Materno</th>
                <th>Identificación</th>
                <th>Acción</th>
            </tr>
        </tfoot>
    </table>
    @* ** *@

</div>
@* ** *@

@* ************************************** Modal para administración de datos de una persona *************************************************** *@
<div class="modal fade" tabindex="-1" id="modalPersonas" data-bs-backdrop="static" data-bs-keyboard="false">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modalTitulo">Modal title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body text-center">
                <div class="contenedorDivsModal">
                    <div class="modalBodyContainers">
                        <label class="col-3">Id:</label><input type="text" class="form-control" placeholder="..." readonly id="txtId">
                    </div>
                    <div class="modalBodyContainers">
                        <label class="col-3">Nombre: <label id="labelAsterisco">*</label></label>
                        <input type="text" class="form-control" placeholder="..." id="txtNombre" onkeypress="NoMayorA(event, 50); SoloLetras(event);" onpaste="event.preventDefault();" oninput="CampoObligatorio(event, this.id,'nombreRequerido');" />
                    </div>
                    <label id="nombreRequerido">El nombre es requerido</label>            
                    <div class="modalBodyContainers">
                        <label class="col-3">A. Paterno: <label id="labelAsterisco">*</label></label><input type="text" class="form-control" placeholder="..." id="txtAPaterno" onkeypress="NoMayorA(event,50); SoloLetras(event);" onpaste="event.preventDefault();" oninput="CampoObligatorio(event, this.id,'aPaternoRequerido');" />
                    </div>
                    <label id="aPaternoRequerido">El apellido paterno es requerido</label>
                    <div class="modalBodyContainers">
                        <label class="col-3">A. Materno:</label><input type="text" class="form-control" placeholder="..." id="txtAMaterno" onkeypress="NoMayorA(event,50); SoloLetras(event);" onpaste="ValidacionPegado(event);" />
                    </div>
                    <div class="modalBodyContainers">
                        <label class="col-3">Identificación: <label id="labelAsterisco">*</label></label><input type="text" class="form-control" placeholder="..." id="txtIdentificacion" onkeypress="NoMayorA(event,50); SoloLetrasYNumeros(event);" onpaste="event.preventDefault();" oninput="CampoObligatorio(event, this.id,'identificacionRequerido');" />
                    </div>
                        <label id="identificacionRequerido">La identificación es requerida</label>
                </div>                    
                <label id="camposCompletos">Ingresar los campos obligatorios</label>
                <label id="mensajeError2"></label>
                <h4 id="h4Borrar">¿Estás seguro de borrar el registro?<br />Se borrarán todas las facturas de la persona</h4>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="btnCerrarModal">Cerrar</button>
                <button type="button" class="btn btn-primary" id="btnConfirmar" onclick="EjecutarAccion();">Save changes</button>
            </div>
        </div>
    </div>
</div>
@* ** *@

@* Importación de la variable Url para la Api *@
<script src="/js/Url.js"></script>
@* ** *@

@* Código JavaScript *@
<script>
    // Método para mandar llamar en cuanto cargue la página
    const CargarPagina = () => {
        ListaPersonas();
    }
    // **

    // Abrir el modal con sus validaciones correspondientes para resetear las opciones o alertas cada vez que se abra
    const AbrirModal = (titulo, item) => {
        OcultarRequeridos();
        if (titulo === "Registrar") {
            ValidarTituloRegistrar();
        } else {
            if (titulo === "Modificar") {
                ValidarTituloModificar(item);
            } else {
                ValidarTituloBorrar(item);
            }
        }
        NombresTitulos(titulo);
    }
    // **

    // Ejecutar acción, es decir, enviar los datos a la api para registrar, modificar o borrar datos de la tabla
    const EjecutarAccion = () => {   
        const accion = document.getElementById("modalTitulo").textContent;
        const txtId = document.getElementById("txtId");
        const txtNombre = document.getElementById("txtNombre");
        const txtAPaterno = document.getElementById("txtAPaterno");
        const txtAMaterno = document.getElementById("txtAMaterno");
        const txtIdentificacion = document.getElementById("txtIdentificacion");
        if (txtNombre.value === "" || txtAPaterno.value === "" || txtIdentificacion.value === "") {
            if (accion === "Registrar" || accion === "Modificar") {
                ValidarRequeridosAlEjecutar(txtNombre, txtAPaterno, txtIdentificacion);
                return;
            }
        } else {
            if (accion === "Registrar" || accion == "Modificar") {
                document.getElementById("camposCompletos").style.display = "none";
            }
        }
        if (accion === "Borrar") {
            HttpDeleteBorrar(txtId.value);
        } else {
            HttpPostRegistrarModificar(accion, txtId.value);
        }
    }
    // **

    /* Lista de facturas donde se muestran todas facturas existentes a través de hacer la petición GET a la api
       utilizando la librería datatable para la configuración de la tabla */
    const ListaPersonas = () => {
        $("#tablaPersonas").DataTable({
            ajax: {
                url: Url + "/Persona/ListaPersonas",
                type: "GET",
                dataSrc: ""
            },
            columns: [
                { data: "id" },
                { data: "nombre" },
                { data: "apellidoPaterno" },
                { data: "apellidoMaterno" },
                { data: "identificacion" },
                {
                    data: null,
                    render: function (item, type, row) {
                        return `
                                    <button class="btn btn-warning" data-bs-toggle="modal" data-bs-target="#modalPersonas" onclick="AbrirModal('Modificar', '${item.id}|${item.nombre}|${item.apellidoPaterno}|${item.apellidoMaterno}|${item.identificacion}');">Modificar</button>
                                    <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#modalPersonas" onclick="AbrirModal('Borrar',${item.id});">Borrar</button>
                                `
                    }
                }
            ],
            language: {
                url: '//cdn.datatables.net/plug-ins/1.13.7/i18n/es-MX.json'
            }
        });
    }
    // **

    // Envío del id a la api por HttpDelete para borrar a la persona con el id correspondiente
    const HttpDeleteBorrar = (id) => {
        fetch(Url + `/Persona/BorrarPersona/${id}`, {
            method: "DELETE"
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error("Error al borrar el registro");
                }
                return response.json();
            })
            .then(response => {
                AppendAlert(response, "success");
                document.getElementById("btnCerrarModal").click();
                $("#tablaPersonas").DataTable().ajax.reload();
            })
            .catch(error => {
                console.error("Ha ocurrido une error", error);
            })
    }
    // **

    // HttpPost para el envío de datos para registrar o modificar una persona en la tabla con los datos que se ingresaron
    const HttpPostRegistrarModificar = (accion, txtIdValue) => {
        let validacionId = 0;
        if (accion === "Modificar") {
            validacionId = txtIdValue;
        }
        const persona = {
            id: validacionId,
            nombre: document.getElementById("txtNombre").value.trim().toUpperCase(),
            apellidoPaterno: document.getElementById("txtAPaterno").value.trim().toUpperCase(),
            apellidoMaterno: document.getElementById("txtAMaterno").value.trim().toUpperCase(),
            identificacion: document.getElementById("txtIdentificacion").value.trim().toUpperCase()
        };
        fetch(Url + "/Persona/RegistrarPersona", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify(persona)
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error(`Error al ${accion}`);
                }
                return response.json();
            })
            .then(response => {

                if (response.id === 2 || response.id === 5) {
                    const mensajeError2 = document.getElementById("mensajeError2");
                    mensajeError2.textContent = response.nombre;
                    mensajeError2.style.display = "block";
                } else {
                    AppendAlert(response.nombre, "success");
                    document.getElementById("btnCerrarModal").click();
                    $("#tablaPersonas").DataTable().ajax.reload();
                }
            })
            .catch(error => {
                console.error("Ha ocurrido un error", error);
            })
    }
    // **

    // Validación para mostrar las advertencias de si los inputs estan vacíos al dar click en registrar
    const ValidarRequeridosAlEjecutar = (txtNombre, txtAPaterno, txtIdentificacion) => {
        if (txtNombre.value === "") {
            document.getElementById("nombreRequerido").style.display = "block";
            txtNombre.classList.add("inputRequerido");
        }
        if (txtAPaterno.value === "") {
            document.getElementById("aPaternoRequerido").style.display = "block";
            txtAPaterno.classList.add("inputRequerido");
        }
        if (txtIdentificacion.value === "") {
            document.getElementById("identificacionRequerido").style.display = "block";
            txtIdentificacion.classList.add("inputRequerido");
        }
        document.getElementById("camposCompletos").style.display = "block";
    }
    // **

    // Mostrar alertas en el html cuando se ha ejecutado una acción, tanto HttpPost como HttpDelete
    const AppendAlert = (mensaje, tipo) => {
        const liveAlertPlaceholder = document.getElementById("liveAlertPlaceholder");
        const idUnico = Date.now().toString() + Math.random().toString();
        const wrapper = document.createElement('div');
        wrapper.innerHTML = [
            `<div class="alert alert-${tipo} alert-dismissible text-center" role="alert" id="${idUnico}">`,
            `   <div class="alertMensajeLetra">${mensaje}</div>`,
            '</div>'
        ].join('');
        liveAlertPlaceholder.append(wrapper);
        setTimeout(() => {
            document.getElementById(idUnico).remove();
        }, 8000);
    }
    // **

    // Mostrar mensajes de datos requeridos que no se han ingresado y colorear el border en rojo del input correspondiente
    const CampoObligatorio = (event, idInput, idIdentificador) => {
        if (event.target.value.length === 0) {
            document.getElementById(idIdentificador).style.display = "block";
            document.getElementById(idInput).classList.add("inputRequerido");
        } else {
            document.getElementById(idIdentificador).style.display = "none";
            document.getElementById(idInput).classList.remove("inputRequerido");
        }
    }
    // **

    // Método para restringir el ingreso de caracteres a la cantidad que necesites
    const NoMayorA = (event, cantidad) => {
        if (event.target.value.length >= cantidad - 1) {
            event.preventDefault();
        }
    }
    // **

    // Restringir el poner espacios a lo primero en el input antes que cualquier otro caracter para evitar el guardar espacios en blanco
    const NoEspaciosPrimero = (event) => {
        if (event.target.value === "") {
            if (event.code === "Space") {
                event.preventDefault();
            }
        }
    }
    // **

    // Permitir ingresar solo letras en el input
    const SoloLetras = (event) => {
        const soloLetras = /^[a-zA-ZñÑáéíóú]+$/;
        if (event.target.value === "") {
            if (event.code === "Space") {
                event.preventDefault();
                return;
            }
        }
        if (!soloLetras.test(event.key) && event.code !== "Space") {
            event.preventDefault();
        }
    }
    // **

    // Permitir ingresar solo letras y número, sin permitir caracteres especiales
    const SoloLetrasYNumeros = (event) => {
        const soloLetrasYNumeros = /[0-9a-zA-Z]/;
        if (event.target.value === "") {
            if (event.code === "Space") {
                event.preventDefault();
                return;
            }
        }
        if (!soloLetrasYNumeros.test(event.key)) {
            event.preventDefault();
        }
    }
    // **

    // Ocultar requeridos para resetear la configuración de validación en el método AbrirModal()
    const OcultarRequeridos = () => {
        document.getElementById("camposCompletos").style.display = "none";
        document.getElementById("nombreRequerido").style.display = "none";
        document.getElementById("aPaternoRequerido").style.display = "none";
        document.getElementById("identificacionRequerido").style.display = "none";
        document.getElementById("mensajeError2").style.display = "none";

        document.getElementById("txtNombre").classList.remove("inputRequerido");
        document.getElementById("txtAPaterno").classList.remove("inputRequerido");
        document.getElementById("txtIdentificacion").classList.remove("inputRequerido");
    }
    // **

    // Validar el titulo de registrar para aplicar la configuración necesaria para registrar una nueva persona en la tabla
    const ValidarTituloRegistrar = () => {
        document.querySelector(".contenedorDivsModal").style.display = "block";
        document.getElementById("h4Borrar").style.display = "none";
        document.getElementById("txtId").value = "Nueva persona";
        document.getElementById("txtNombre").value = "";
        document.getElementById("txtAPaterno").value = "";
        document.getElementById("txtAMaterno").value = "";
        document.getElementById("txtIdentificacion").value = "";
    }
    // **

    // Validar el titulo de modificar para aplicar la configuración necesaria para modificar una persona en la tabla
    const ValidarTituloModificar = (item) => {
        document.querySelector(".contenedorDivsModal").style.display = "block";
        document.getElementById("h4Borrar").style.display = "none";
        const arrayData = item.split("|");
        document.getElementById("txtId").value = arrayData[0];
        document.getElementById("txtNombre").value = arrayData[1];
        document.getElementById("txtAPaterno").value = arrayData[2];
        document.getElementById("txtAMaterno").value = arrayData[3];
        document.getElementById("txtIdentificacion").value = arrayData[4];
    }
    // **

    // Validar el titulo de borrar para aplicar la configuración necesaria para borrar una persona en la tabla
    const ValidarTituloBorrar = (item) => {
        document.getElementById("txtId").value = item;
        document.querySelector(".contenedorDivsModal").style.display = "none";
        document.getElementById("h4Borrar").style.display = "block";
    }
    // **

    // Aplicar los nombres del titulo del modal y del botón para cada acción correspondiente en el modal, ya sea para registrar, modificar o borrar
    const NombresTitulos = (titulo) => {
        const modalTitulo = document.getElementById("modalTitulo");
        const btnConfirmar = document.getElementById("btnConfirmar");
        modalTitulo.innerText = titulo;
        btnConfirmar.innerText = titulo;
    }
    // **

    // Instrucción para decir que al cargar la página ejecute el método CargarPagina
    window.onload = CargarPagina;
    // **

</script>
@* ** *@